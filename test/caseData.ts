import { TraversalNode } from "../src/types";

export const initSkewTree = () => ({
  tree: {
    1: {
      id: 1,
      children: [2, 3, 4],
      parent: null,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    2: {
      id: 2,
      children: [5],
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    3: {
      id: 3,
      children: [6],
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 2,
    },
    4: {
      id: 4,
      children: null,
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 3,
    },
    5: {
      id: 5,
      children: [7],
      parent: 2,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    6: {
      id: 6,
      children: null,
      parent: 3,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 5,
    },
    7: {
      id: 7,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
  } as unknown as Record<number, TraversalNode>,
  rootId: 1,
  depth: 4,
});

export const initSkewTreeData = () => [
  {
    init: initSkewTree,
    separation: {
      meanNodeSize: 10,
      siblingSpace: 5,
      subtreeSeparation: 5,
    },
    traversedTree: {
      1: {
        id: 1,
        children: [2, 3, 4],
        parent: null,
        preliminary: 15,
        modifier: 0,
        leftNeighbor: null,
      },
      2: {
        id: 2,
        children: [5],
        parent: 1,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
      3: {
        id: 3,
        children: [6],
        parent: 1,
        // values after subtree apportioning, in this case it equals to meanNodeSize + subtreeSeparation
        preliminary: 15,
        modifier: 15,
        leftNeighbor: 2,
      },
      4: {
        id: 4,
        children: null,
        parent: 1,
        preliminary: 30,
        modifier: 0,
        leftNeighbor: 3,
      },
      5: {
        id: 5,
        children: [7],
        parent: 2,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
      6: {
        id: 6,
        children: null,
        parent: 3,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: 5,
      },
      7: {
        id: 7,
        children: null,
        parent: 5,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
    },
  },
  {
    init: initSkewTree,
    separation: { meanNodeSize: 10, siblingSpace: 5, subtreeSeparation: 20 },
    traversedTree: {
      1: {
        id: 1,
        children: [2, 3, 4],
        parent: null,
        preliminary: 22.5,
        modifier: 0,
        leftNeighbor: null,
      },
      2: {
        id: 2,
        children: [5],
        parent: 1,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
      3: {
        id: 3,
        children: [6],
        parent: 1,
        preliminary: 30,
        modifier: 30,
        leftNeighbor: 2,
      },
      4: {
        id: 4,
        children: null,
        parent: 1,
        preliminary: 45,
        modifier: 0,
        leftNeighbor: 3,
      },
      5: {
        id: 5,
        children: [7],
        parent: 2,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
      6: {
        id: 6,
        children: null,
        parent: 3,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: 5,
      },
      7: {
        id: 7,
        children: null,
        parent: 5,
        preliminary: 0,
        modifier: 0,
        leftNeighbor: null,
      },
    },
  },
];

export const initIsoscelesTree = () => ({
  rootId: 1,
  tree: {
    1: {
      id: 1,
      children: [2, 3, 4],
      parent: null,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    2: {
      id: 2,
      children: [5],
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    3: {
      id: 3,
      children: [6, 7],
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 2,
    },
    4: {
      id: 4,
      children: [8],
      parent: 1,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 3,
    },
    5: {
      id: 5,
      children: [9, 10, 11, 12],
      parent: 2,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    6: {
      id: 6,
      children: null,
      parent: 3,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 5,
    },
    7: {
      id: 7,
      children: null,
      parent: 3,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 6,
    },
    8: {
      id: 8,
      children: [13, 14, 15, 16],
      parent: 4,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 7,
    },
    9: {
      id: 9,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    10: {
      id: 10,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 9,
    },
    11: {
      id: 11,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 10,
    },
    12: {
      id: 12,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 11,
    },
    13: {
      id: 13,
      children: null,
      parent: 8,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 12,
    },
    14: {
      id: 14,
      children: null,
      parent: 8,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 13,
    },
    15: {
      id: 15,
      children: null,
      parent: 8,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 14,
    },
    16: {
      id: 16,
      children: null,
      parent: 8,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 15,
    },
  } as unknown as Record<number, TraversalNode>,
  depth: 4,
});

export const initIsoscelesTreeData = () => ({
  init: initIsoscelesTree,
  separation: { meanNodeSize: 10, siblingSpace: 5, subtreeSeparation: 4 },
  traversedTree: {
    "1": {
      id: 1,
      children: [2, 3, 4],
      parent: null,
      preliminary: 52,
      modifier: 0,
      leftNeighbor: null,
    },
    "2": {
      id: 2,
      children: [5],
      parent: 1,
      preliminary: 22.5,
      modifier: 0,
      leftNeighbor: null,
    },
    "3": {
      id: 3,
      children: [6, 7],
      parent: 1,
      preliminary: 52,
      modifier: 44.5,
      leftNeighbor: 2,
    },
    "4": {
      id: 4,
      children: [8],
      parent: 1,
      preliminary: 81.5,
      modifier: 59,
      leftNeighbor: 3,
    },
    "5": {
      id: 5,
      children: [9, 10, 11, 12],
      parent: 2,
      preliminary: 22.5,
      modifier: 0,
      leftNeighbor: null,
    },
    "6": {
      id: 6,
      children: null,
      parent: 3,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 5,
    },
    "7": {
      id: 7,
      children: null,
      parent: 3,
      preliminary: 15,
      modifier: 0,
      leftNeighbor: 6,
    },
    "8": {
      id: 8,
      children: [13, 14, 15, 16],
      parent: 4,
      preliminary: 22.5,
      modifier: 0,
      leftNeighbor: 7,
    },
    "9": {
      id: 9,
      children: null,
      parent: 5,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: null,
    },
    "10": {
      id: 10,
      children: null,
      parent: 5,
      preliminary: 15,
      modifier: 0,
      leftNeighbor: 9,
    },
    "11": {
      id: 11,
      children: null,
      parent: 5,
      preliminary: 30,
      modifier: 0,
      leftNeighbor: 10,
    },
    "12": {
      id: 12,
      children: null,
      parent: 5,
      preliminary: 45,
      modifier: 0,
      leftNeighbor: 11,
    },
    "13": {
      id: 13,
      children: null,
      parent: 8,
      preliminary: 0,
      modifier: 0,
      leftNeighbor: 12,
    },
    "14": {
      id: 14,
      children: null,
      parent: 8,
      preliminary: 15,
      modifier: 0,
      leftNeighbor: 13,
    },
    "15": {
      id: 15,
      children: null,
      parent: 8,
      preliminary: 30,
      modifier: 0,
      leftNeighbor: 14,
    },
    "16": {
      id: 16,
      children: null,
      parent: 8,
      preliminary: 45,
      modifier: 0,
      leftNeighbor: 15,
    },
  },
});